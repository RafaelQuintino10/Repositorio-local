from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import pandas as pd
from urllib.parse import urljoin
from datetime import datetime

# Configurações do Selenium WebDriver
chrome_options = Options()
chrome_options.add_argument("--headless")  # Executa o navegador em modo headless
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

# Configura o caminho para o ChromeDriver
webdriver_service = Service('path/to/chromedriver')  # Atualize com o caminho para o ChromeDriver

# Inicializa o WebDriver
driver = webdriver.Chrome(service=webdriver_service, options=chrome_options)

# Função principal
def scrape_mercadolivre(produto):
    url = f"https://lista.mercadolivre.com.br/{produto}"
    driver.get(url)

    # Obtém a quantidade de resultados
    qtd_itens = driver.find_element(By.CLASS_NAME, "ui-search-search-result__quantity-results").text.strip()
    print(qtd_itens)

    dic_produtos = {'Modelo': [], 'Preço': [], 'Link': [], 'Marketplace': [], 'Termo Pesquisado': [], 'Termo de Filtro': [], 'Dia da Busca': [], 'Hora da Busca': [], 'Inclui Frete': [], 'Valor do Frete': [], 'Vendedor': [], 'Ordem': [], 'Patrocinado': [], 'Avaliação': [], 'Num Avaliações': []}
    n = 1

    produtos = driver.find_elements(By.CLASS_NAME, "ui-search-result__wrapper")

    for produto in produtos:
        marca = produto.find_element(By.CSS_SELECTOR, 'h2.ui-search-item__title').text.strip()
        preco = produto.find_element(By.CSS_SELECTOR, 'span.price-tag-fraction').text.strip()
        link = produto.find_element(By.CSS_SELECTOR, 'a.ui-search-link').get_attribute('href')
        link_completo = urljoin(url, link)

        print(f"{n}. {marca} // {preco} // {link_completo}")

        # Adiciona informações ao dicionário
        dic_produtos['Modelo'].append(marca)
        dic_produtos['Preço'].append(preco)
        dic_produtos['Link'].append(link_completo)
        dic_produtos['Marketplace'].append('Mercado Livre')
        dic_produtos['Termo Pesquisado'].append(escolha_do_usuario)
        dic_produtos['Termo de Filtro'].append('luvas, adidas')  # Exemplo de termo de filtro
        dic_produtos['Dia da Busca'].append(datetime.now().strftime("%Y-%m-%d"))
        dic_produtos['Hora da Busca'].append(datetime.now().strftime("%H:%M:%S"))
        dic_produtos['Inclui Frete'].append('N')  # Simulação de frete
        dic_produtos['Valor do Frete'].append('0')  # Simulação de valor do frete
        dic_produtos['Vendedor'].append('')  # Simulação de vendedor
        dic_produtos['Ordem'].append(n)
        dic_produtos['Patrocinado'].append('N')  # Simulação de patrocinado
        dic_produtos['Avaliação'].append('')  # Simulação de avaliação
        dic_produtos['Num Avaliações'].append('')  # Simulação de número de avaliações

        n += 1

    # Cria DataFrame e salva em CSV
    tabela = pd.DataFrame(dic_produtos)
    print(tabela)
    tabela.to_csv('Resultados_da_pesquisa.csv', index=False)
    tabela.to_excel('Resultados_da_pesquisa.xlsx', index=False)

# Entrada do usuário
escolha_do_usuario = input('Qual produto deseja buscar no Mercado Livre? ')
scrape_mercadolivre(escolha_do_usuario)

# Fecha o WebDriver
driver.quit()